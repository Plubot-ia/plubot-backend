[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "backend-api"
version = "0.1.0"
description = "Backend API con verificación de estado mejorada"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Tu Nombre", email = "tu.email@ejemplo.com"}
]
keywords = ["api", "backend", "python", "fastapi"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "httpx>=0.25.0",
    "pydantic-settings>=2.1.0",  # Para configuración con variables de entorno
    "python-multipart>=0.0.6",  # Para form data y file uploads
]

[project.optional-dependencies]
# Dependencias de base de datos
database = [
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",        # PostgreSQL async
    "psycopg2-binary>=2.9.9", # PostgreSQL sync
]

# Cache y performance
cache = [
    "redis>=5.0.0",
    "aioredis>=2.0.0",
    "hiredis>=2.2.0",
]

# Autenticación y seguridad
auth = [
    "passlib[bcrypt]>=1.7.4",
    "python-jose[cryptography]>=3.3.0",
    "python-multipart>=0.0.6",
    "cryptography>=41.0.0",
]

# Logging y monitoreo
monitoring = [
    "structlog>=23.2.0",
    "sentry-sdk[fastapi]>=1.40.0",
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
]

# Validación y serialización adicional
validation = [
    "email-validator>=2.1.0",
    "phonenumbers>=8.13.0",
    "python-dateutil>=2.8.2",
]

# Desarrollo
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "pytest-benchmark>=4.0.0",
    "pytest-randomly>=3.15.0",
    "pytest-sugar>=0.9.7",
    "pytest-timeout>=2.2.0",
    "httpx>=0.25.0",
    "factory-boy>=3.3.0",       # Para crear datos de prueba
    "freezegun>=1.2.0",         # Para mockear datetime
    "respx>=0.20.0",            # Para mockear HTTP requests
    
    # Code quality
    "pre-commit>=3.5.0",
    "mypy>=1.7.0",
    "ruff>=0.1.6",
    
    # Security scanning
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
    "semgrep>=1.45.0",
    "pip-audit>=2.6.0",
    
    # Code analysis
    "vulture>=2.10",
    "radon>=6.0.1",
    "xenon>=0.9.0",
    "interrogate>=1.5.0",
    "dlint>=0.14.1",
    "flake8-secure-coding-standard>=1.4.0",
    "cohesion>=1.0.0",
    "pyroma>=4.2",
    "check-manifest>=0.49",
    
    # Build and release
    "twine>=4.0.2",
    "build>=1.0.0",
    
    # Task runners
    "tox>=4.11.0",
    "nox>=2023.4.22",
    "invoke>=2.2.0",
    
    # Development tools
    "ptpython>=3.0.0",
    "ipython>=8.17.0",
    "rich>=13.7.0",             # Para output colorizado
    "typer>=0.9.0",             # Para CLIs
]

# Testing mínimo
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "coverage[toml]>=7.3.0",
    "factory-boy>=3.3.0",
    "freezegun>=1.2.0",
]

# Documentación
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-swagger-ui-tag>=0.6.0",
]

# Producción - dependencias completas para deploy
production = [
    "backend-api[database,cache,auth,monitoring,validation]",
    "gunicorn>=21.2.0",
]

[project.urls]
Homepage = "https://github.com/tu-usuario/backend-api"
Documentation = "https://tu-usuario.github.io/backend-api"
Repository = "https://github.com/tu-usuario/backend-api"
Issues = "https://github.com/tu-usuario/backend-api/issues"
Changelog = "https://github.com/tu-usuario/backend-api/blob/main/CHANGELOG.md"

[project.scripts]
dev-server = "scripts.dev:main"

# ============================================================================
# SETUPTOOLS - Configuración de empaquetado
# ============================================================================
[tool.setuptools]


[tool.setuptools.packages.find]

exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = ["py.typed", "*.pyi"]

# ============================================================================
# RUFF - Linting y Formateo (actualizado)
# ============================================================================
[tool.ruff]
line-length = 100
target-version = "py311"
src = ["src", "tests"]
exclude = [
    ".bzr", ".direnv", ".eggs", ".git", ".git-rewrite", ".hg",
    ".ipynb_checkpoints", ".mypy_cache", ".nox", ".pants.d", ".pyenv",
    ".pytest_cache", ".pytype", ".ruff_cache", ".svn", ".tox", ".venv",
    ".vscode", "__pypackages__", "_build", "buck-out", "build", "dist",
    "node_modules", "site-packages", "venv", "migrations",
    "get-pip.py",
    "e.py",
]

[tool.ruff.lint]
select = [
    "E", "W",      # pycodestyle
    "F",           # Pyflakes
    "I",           # isort
    "N",           # pep8-naming
    "D",           # pydocstyle
    "UP",          # pyupgrade
    "YTT",         # flake8-2020
    "ANN",         # flake8-annotations
    "ASYNC",       # flake8-async
    "S",           # flake8-bandit
    "BLE",         # flake8-blind-except
    "FBT",         # flake8-boolean-trap
    "B",           # flake8-bugbear
    "A",           # flake8-builtins
    "COM",         # flake8-commas
    "CPY",         # flake8-copyright
    "C4",          # flake8-comprehensions
    "DTZ",         # flake8-datetimez
    "T10",         # flake8-debugger
    "DJ",          # flake8-django
    "EM",          # flake8-errmsg
    "EXE",         # flake8-executable
    "FA",          # flake8-future-annotations
    "ISC",         # flake8-implicit-str-concat
    "ICN",         # flake8-import-conventions
    "G",           # flake8-logging-format
    "INP",         # flake8-no-pep420
    "PIE",         # flake8-pie
    "T20",         # flake8-print
    "PYI",         # flake8-pyi
    "PT",          # flake8-pytest-style
    "Q",           # flake8-quotes
    "RSE",         # flake8-raise
    "RET",         # flake8-return
    "SLF",         # flake8-self
    "SLOT",        # flake8-slots
    "SIM",         # flake8-simplify
    "TID",         # flake8-tidy-imports
    "TCH",         # flake8-type-checking
    "INT",         # flake8-gettext
    "ARG",         # flake8-unused-arguments
    "PTH",         # flake8-use-pathlib
    "TD",          # flake8-todos
    "FIX",         # flake8-fixme
    "ERA",         # eradicate
    "PD",          # pandas-vet
    "PGH",         # pygrep-hooks
    "PL",          # Pylint
    "TRY",         # tryceratops
    "FLY",         # flynt
    "NPY",         # NumPy-specific rules
    "AIR",         # Airflow
    "PERF",        # Perflint
    "FURB",        # refurb
    "LOG",         # flake8-logging
    "RUF",         # Ruff-specific rules
]

ignore = [
    # Docstring requirements (ajustar según necesites)
    "D100", "D101", "D102", "D103", "D104", "D105", "D107",
    # Type annotations
    "ANN101", "ANN102", "ANN204",
    # Formatter conflicts
    "COM812", "ISC001",
    # FastAPI específicos
    "B008",    # Function calls in argument defaults (FastAPI Depends)
    # Testing
    "S101",    # Use of assert
    # Complexity (ajustar según tu proyecto)
    "PLR0913", # Too many arguments
    "PLR2004", # Magic value used in comparison
    "PLR0911", # Too many return statements
    "PLR0915", # Too many statements
    # TODOs y FIXMEs
    "TD002", "TD003", "FIX002",
    # Subprocess (para scripts)
    "S603", "S607",
]

fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "F401", "F811", "PLR2004", "S101", "ARG001", "PLR0913", 
    "ANN", "D", "S105", "S106", "PLR0915", "PT011", "PT012"
]
"scripts/**/*" = ["T201", "S602", "S603", "S607", "PLR0913"]
"**/__init__.py" = ["F401", "D104"]
"**/migrations/**" = ["ALL"]
"**/config/**" = ["S105", "S106", "PLR2004"]
"**/settings/**" = ["S105", "S106", "PLR2004"]
"**/routers/**" = ["B008"]
"**/api/**" = ["B008"]
"**/endpoints/**" = ["B008"]
"conftest.py" = ["ARG001", "PT011"]

[tool.ruff.lint.isort]
known-first-party = ["api", "models", "services", "utils", "core", "config"]
known-third-party = ["fastapi", "pydantic", "sqlalchemy", "alembic"]
section-order = [
    "future", "standard-library", "third-party", "first-party", "local-folder"
]
split-on-trailing-comma = true
force-single-line = false
force-sort-within-sections = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 12
max-returns = 6
max-statements = 50
max-public-methods = 20

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

# ============================================================================
# PYTEST - Testing (mejorado)
# ============================================================================
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=xml",
    "--cov-report=lcov",
    "--cov-fail-under=85",
    "--cov-branch",
    "--tb=short",
    "-ra",
    "--maxfail=10",
    "--durations=10",
    "--randomly-seed=12345",
    "--randomly-dont-reorganize",
    "--timeout=300",
]
testpaths = ["tests"]
pythonpath = ["src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests", 
    "api: marks tests as API tests",
    "db: marks tests that require database",
    "redis: marks tests that require Redis",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
    "smoke: marks tests as smoke tests",
    "regression: marks tests as regression tests",
    "e2e: marks tests as end-to-end tests",
    "flaky: marks tests as potentially flaky",
    "benchmark: marks tests as benchmark tests",
    "auth: marks tests related to authentication",
    "external: marks tests that call external services",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning:passlib.*",
    "ignore::PendingDeprecationWarning",
    "ignore::ImportWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning",
]
asyncio_mode = "auto"
timeout = 300
timeout_method = "thread"
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# ============================================================================
# COVERAGE - Cobertura de tests (mejorado)
# ============================================================================
[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
context = "${COVERAGE_CONTEXT}"
omit = [
    "tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/conftest.py",
    "*/settings/*",
    "*/config/local.py",
    "*/config/testing.py",
    "manage.py",
    "*/scripts/*",
    "*/__main__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
sort = "cover"
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "class .*\\bTypedDict\\):",
    "@(abc\\.)?abstractmethod",
    "@overload",
    "pass",
    "\\.\\.\\.",
    "TYPE_CHECKING",
]
fail_under = 85

[tool.coverage.html]
directory = "htmlcov"
show_contexts = true

[tool.coverage.xml]
output = "coverage.xml"

# ============================================================================
# MYPY - Type Checking (mejorado)
# ============================================================================
[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
warn_unreachable = true
warn_redundant_casts = true
show_error_codes = true
show_column_numbers = true
pretty = true
color_output = true
error_summary = true
incremental = true
sqlite_cache = true
cache_dir = ".mypy_cache"

# Plugins
plugins = [
    "pydantic.mypy",
    "sqlalchemy.ext.mypy.plugin",
]

# Configuración específica para diferentes módulos
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false

[[tool.mypy.overrides]]
module = [
    "uvicorn.*",
    "gunicorn.*",
    "factory.*",
    "freezegun.*",
    "respx.*",
]
ignore_missing_imports = true

# ============================================================================
# BANDIT - Security Linting (mejorado)
# ============================================================================
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "migrations"]
tests = [
    "B101", "B102", "B103", "B104", "B105", "B106", "B107", "B110",
    "B112", "B201", "B301", "B302", "B303", "B304", "B305", "B306",
    "B307", "B308", "B309", "B310", "B311", "B312", "B313", "B314",
    "B315", "B316", "B317", "B318", "B319", "B320", "B321", "B322",
    "B323", "B324", "B325", "B401", "B402", "B403", "B404", "B405",
    "B406", "B407", "B408", "B409", "B410", "B411", "B412", "B413",
    "B501", "B502", "B503", "B504", "B505", "B506", "B507", "B601",
    "B602", "B603", "B604", "B605", "B606", "B607", "B608", "B609",
    "B610", "B611", "B701", "B702", "B703"
]
skips = ["B101"]  # Solo permitir asserts en tests

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py", "*/tests/*"]

# ============================================================================
# INTERROGATE - Docstring Coverage
# ============================================================================
[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = true
ignore-private = true
ignore-property-decorators = true
ignore-module = true
ignore-nested-functions = true
ignore-nested-classes = true
fail-under = 80
exclude = ["setup.py", "docs", "build", "tests", "migrations"]
verbose = 2
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false

# ============================================================================
# VULTURE - Dead Code Detection (mejorado)
# ============================================================================
[tool.vulture]
exclude = ["venv/", ".venv/", "migrations/", "build/", "dist/"]
ignore_decorators = [
    "@app.route", "@router.get", "@router.post", "@router.put", 
    "@router.delete", "@router.patch", "@router.head", "@router.options",
    "@depends", "@Depends", "@lru_cache", "@property", "@staticmethod",
    "@classmethod", "@validator", "@root_validator", "@field_validator"
]
ignore_names = ["_*", "test_*", "*_test", "Mock*", "*Mock"]
make_whitelist = true
min_confidence = 80
paths = ["src"]
sort_by_size = true

# ============================================================================
# COMMITIZEN - Conventional Commits
# ============================================================================
[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "semver"
version_provider = "pep621"
update_changelog_on_bump = true
major_version_zero = true

# ============================================================================
# SEMANTIC RELEASE (mejorado)
# ============================================================================
[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
branch = "main"
changelog_file = "CHANGELOG.md"
build_command = "python -m build"
dist_path = "dist/"
upload_to_pypi = false
upload_to_release = true
hvcs = "github"
commit_author = "semantic-release <semantic-release>"
commit_message = "chore(release): {version} [skip ci]"

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = [
    "^Merge",
    "^Bump",
    "^chore\\(deps\\):",
]

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

# ============================================================================
# ADDITIONAL TOOLS
# ============================================================================

# Para pre-commit hooks
[tool.pre-commit]
default_stages = ["commit", "push"]
fail_fast = false
default_language_version = {python = "python3.11"}

# Para performance profiling
[tool.py-spy]
duration = 30
rate = 100
subprocesses = true